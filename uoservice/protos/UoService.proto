syntax = "proto3";

package uoservice;

message Empty {}

message GrpcMobileData {
  string name = 1;
  float x = 2;
  float y = 3;
  uint32 race = 4;
  uint32 serial = 5;
}

message GrpcItemData {
  string name = 1;
  uint32 layer = 2;
  uint32 serial = 3;
  uint32 amount = 4;
}

message GrpcGameObjectData {
  string type = 1;
  uint32 screenX = 2;
  uint32 screenY = 3;
  uint32 distance = 4;
  uint32 gameX = 5;
  uint32 gameY = 6;
  uint32 serial = 7;
  string name = 8;
  bool isCorpse = 9;
  string title = 10;
  uint32 amount = 11;
  uint32 price = 12;
}

message GrpcGameObjectList {
  repeated GrpcGameObjectData gameObject = 1;
}

message SemaphoreAction {
  string mode = 1;
}

message GrpcMobileList {
  repeated GrpcMobileData mobile = 1;
}

message GrpcItemList {
  repeated GrpcItemData item = 1;
}

message GrpcPopupMenuList {
  repeated string menu = 1;
}

message Config {
  string name = 1;
}

message PlayerStatus {
  uint32 str = 1;
  uint32 dex = 2;
  uint32 intell = 3;

  uint32 hits = 4;
  uint32 hitsMax = 5;
  uint32 stamina = 6;
  uint32 staminaMax = 7;
  uint32 mana = 8;
  uint32 manaMax = 9;

  uint32 gold = 10;
  uint32 physicalResistance = 11;
  uint32 weight = 12;
  uint32 weightMax = 13;
}

message States {
  GrpcMobileList mobileList = 1;
  GrpcItemList worldItemList = 2;
  GrpcItemList equippedItemList = 3;
  GrpcItemList backpackItemList = 4;
  GrpcItemList corpseItemList = 5;
  PlayerStatus playerStatus = 6;
  GrpcGameObjectList mobileObjectList = 7;
  GrpcGameObjectList playerMobileObjectList = 8;
  GrpcGameObjectList landObjectList = 9;
  GrpcGameObjectList itemObjectList = 10;
  GrpcGameObjectList staticObjectList = 11;
  GrpcGameObjectList itemDropableLandList = 12;
  GrpcGameObjectList vendorItemObjectList = 13;
  GrpcPopupMenuList popupMenuList = 14;
}

message WalkDirection {
  uint32 direction = 1;
}

message Actions {
  uint32 actionType = 1;
  uint32 mobileSerial = 2;
  uint32 itemSerial = 3;
  WalkDirection walkDirection = 4;
  uint32 index = 5;
  uint32 amount = 6;
}

service UoService {
  rpc Reset (Config) returns (States);
  rpc ReadObs (Config) returns (States);
  rpc WriteAct (Actions) returns (Empty);
  rpc ActSemaphoreControl (SemaphoreAction) returns (Empty);
  rpc ObsSemaphoreControl (SemaphoreAction) returns (Empty);
}